{
  "id": "ccb470794aa3",
  "title": "Day 422",
  "createdAt": "2023-05-19 01:53:37",
  "tags": [
    "codepen",
    "ai"
  ],
  "url": "https://chepenikconor.medium.com/day-422-ccb470794aa3",
  "content": "# Day 422\n\nCodepen is an incredible website for learning about cool website tricks. Someone else's CSS can go a long way on your website. For Habit-Chain I went ahead and added this styling to all the buttons on my website. I'm very happy with how it turned out.\n\n<iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fcodepen.io%2Fkocsten%2Fembed%2Fpreview%2FrggjXp%3Fdefault-tabs%3Dcss%252Cresult%26height%3D600%26host%3Dhttps%253A%252F%252Fcodepen.io%26slug-hash%3DrggjXp&display_name=CodePen&url=https%3A%2F%2Fcodepen.io%2Fkocsten%2Fpen%2FrggjXp&image=https%3A%2F%2Fshots.codepen.io%2Fusername%2Fpen%2FrggjXp-512.jpg%3Fversion%3D1559777544&key=a19fcc184b9711e1b4764040d3dc5c07&type=text%2Fhtml&schema=codepen\" title=\"\" height=\"600\" width=\"800\"></iframe>\n\nI've still got a lot of work to do but it feels good to see my Habit-Chain app coming together. Here is another cool codepen I found. Would be much harder to put this in my app, but I'm impressed that someone used math to make such a dope animation.\n\n<iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fcodepen.io%2Ffindoff%2Fembed%2Fpreview%2FmdzzjGq%3Fdefault-tabs%3Djs%252Cresult%26height%3D600%26host%3Dhttps%253A%252F%252Fcodepen.io%26slug-hash%3DmdzzjGq&display_name=CodePen&url=https%3A%2F%2Fcodepen.io%2Ffindoff%2Fpen%2FmdzzjGq&image=https%3A%2F%2Fshots.codepen.io%2Fusername%2Fpen%2FmdzzjGq-512.jpg%3Fversion%3D1684414766&key=a19fcc184b9711e1b4764040d3dc5c07&type=text%2Fhtml&schema=codepen\" title=\"\" height=\"600\" width=\"800\"></iframe>\n\nThis code appears to be a JavaScript program that creates a simple animation using the HTML5 canvas element. Let's walk through the code and understand what each part does:\n\n1. The code starts by clearing the console using `console.clear()`.\n\n2. Several constants and functions are declared using destructuring assignment and the `Math` and `glMatrix` libraries.\n\n3. The `main()` function is defined, which serves as the entry point for the program. It sets up the canvas, initializes the state, creates a `Stats` object for performance monitoring, and starts the animation loop.\n\n4. The `resize()` function is responsible for adjusting the size of the canvas whenever the window is resized. It is called initially and also added as an event listener for the `resize` event.\n\n5. The `initState()` function initializes the state of the program. It generates walls and actors using the `genWalls()` and `genActors()` functions.\n\n6. The `genWalls()` function generates an array of wall objects. It creates walls with random positions, angles, widths, and colors. The walls are stored in the `walls` array.\n\n7. The `genActors()` function generates an array of actor objects. Similar to `genWalls()`, it creates actors with random positions, widths, and colors, and stores them in the `actors` array.\n\n8. The `cycle()` function is the main animation loop. It is called repeatedly by the `requestAnimationFrame()` method. It updates the time, calls the `control()`, `process()`, and `render()` functions, and measures the performance using the `Stats` object.\n\n9. The `control()` function is currently empty and does not perform any specific actions. It could be used to handle user input or other control-related logic.\n\n10. The `process()` function is currently empty as well. It is a placeholder for any processing logic that needs to be executed during each frame of the animation.\n\n11. The `render()` function is responsible for drawing the scene on the canvas. It clears the canvas, translates the coordinate system to the center of the canvas, and calls various drawing functions like `drawActors()`, `drawWalls()`, and `drawWallShadows()`.\n\n12. The `drawWallShadows()` function draws shadows of the walls based on the position of the mouse cursor. It calculates the projected positions of the walls and fills the shapes with a black color.\n\n13. The `drawWalls()` function draws the walls on the canvas using the `stroke()` method of the `canvasCtx` context. Each wall is drawn as a line segment with a specified color.\n\n14. The `drawActors()` function draws the actors (circles) on the canvas using the `arc()` method of the `canvasCtx` context. Each actor is drawn as a filled circle with a specified color.\n\n15. The `adjustAngle()` function is a utility function that helps adjust angles smoothly. It takes two angles, a target angle (`b`) and a current angle (`a`), and a speed value. It calculates the difference between the angles, ensuring that the resulting angle change is within the specified speed.\n\nThat's a high-level overview of the code. It sets up the canvas, generates walls and actors, and creates an animation loop to continuously update and render the scene. I know it's not your typical art, but I'd argue it takes amazing creativity to make something like this. Just a different kind of creativity then most are used to.\n\nIt's an exciting time to get to live through humanity entering exponential growth. I'm hopeful we can use these technologies to help create a world of abundance. A world that will be proud to raise our kids in. A world where there is no more war because people control their data with cryptographic keys and AI chatbots that run locally and help us navigate the digital wild west.\n\n5/18/23\n\nConor Jay Chepenik",
  "wordCount": 687,
  "readingTime": 2.5924528301886793,
  "claps": 0,
  "voters": 0
}