{
  "id": "57f8bf6a09d3",
  "title": "Day 890",
  "createdAt": "2024-08-29 03:36:22",
  "tags": [
    "bitcoin",
    "web-dev",
    "gold",
    "analog",
    "digital"
  ],
  "url": "https://chepenikconor.medium.com/day-890-57f8bf6a09d3",
  "content": "# Day 890\n\nMeant to write a story, but then I got busy playing around with Replit and AI tools:\n\n![[https://x.com/ConorChepenik/status/1828992040367014011](https://x.com/ConorChepenik/status/1828992040367014011)](https://miro.medium.com/1*mQPU6xAXgMpMpKKiKPXpfg.png)\n\n[You can find the app here](https://epicshapegenerator.replit.app/) - However, if I've stopped paying for Replit and the app is no longer hosted when you're reading this, I've included some screenshots below as well as the HTML, CSS, & JS code.\n\n```xml\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Epic Shape Generator</title>\n    <meta name=\"description\" content=\"Create and animate colorful shapes with the Epic Shape Generator. Unleash your creativity with interactive controls and stunning animations.\">\n    <meta name=\"keywords\" content=\"shape generator, animation, interactive, creative tool, web app\">\n    <meta name=\"author\" content=\"Your Name\">\n    <meta property=\"og:title\" content=\"Epic Shape Generator\">\n    <meta property=\"og:description\" content=\"Create and animate colorful shapes with the Epic Shape Generator. Unleash your creativity with interactive controls and stunning animations.\">\n    <meta property=\"og:image\" content=\"https://images.unsplash.com/photo-1550745165-9bc0b252726f?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&h=630&q=80\">\n    <meta property=\"og:url\" content=\"https://epicshapegenerator.replit.app/\">\n    <meta property=\"og:type\" content=\"website\">\n    <meta name=\"twitter:card\" content=\"summary_large_image\">\n    <meta name=\"twitter:title\" content=\"Epic Shape Generator\">\n    <meta name=\"twitter:description\" content=\"Create and animate colorful shapes with the Epic Shape Generator. Unleash your creativity with interactive controls and stunning animations.\">\n    <meta name=\"twitter:image\" content=\"https://images.unsplash.com/photo-1550745165-9bc0b252726f?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&h=630&q=80\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/gsap/3.9.1/gsap.min.js\"></script>\n    <style>\n        body {\n            font-family: 'Arial', sans-serif;\n            background-color: #1a1a2e;\n            color: #fff;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            overflow: hidden;\n        }\n        .container {\n            background-color: #16213e;\n            border-radius: 20px;\n            padding: 30px;\n            box-shadow: 0 10px 30px rgba(0,0,0,0.3);\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            width: 90%;\n            max-width: 600px;\n        }\n        #canvas {\n            background-color: #0f3460;\n            border-radius: 10px;\n            margin-bottom: 20px;\n        }\n        .controls {\n            display: flex;\n            flex-wrap: wrap;\n            justify-content: center;\n            gap: 10px;\n            margin-bottom: 20px;\n            width: 100%;\n        }\n        button {\n            background-color: #e94560;\n            color: white;\n            border: none;\n            padding: 10px 20px;\n            border-radius: 50px;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            font-size: 14px;\n            font-weight: bold;\n            text-transform: uppercase;\n            flex: 1;\n            min-width: 120px;\n        }\n        button:hover {\n            background-color: #ff6b6b;\n            transform: translateY(-2px);\n            box-shadow: 0 5px 15px rgba(233, 69, 96, 0.4);\n        }\n        .color-controls {\n            display: flex;\n            align-items: center;\n            gap: 10px;\n            margin-bottom: 20px;\n        }\n        input[type=\"color\"] {\n            -webkit-appearance: none;\n            width: 40px;\n            height: 40px;\n            border: none;\n            border-radius: 50%;\n            background: none;\n            cursor: pointer;\n            padding: 0;\n        }\n        input[type=\"color\"]::-webkit-color-swatch-wrapper {\n            padding: 0;\n        }\n        input[type=\"color\"]::-webkit-color-swatch {\n            border: none;\n            border-radius: 50%;\n            box-shadow: 0 0 0 2px white;\n        }\n        .slider-container {\n            width: 100%;\n            margin-bottom: 10px;\n        }\n        .slider-label {\n            display: flex;\n            justify-content: space-between;\n            margin-bottom: 5px;\n        }\n        input[type=\"range\"] {\n            width: 100%;\n            -webkit-appearance: none;\n            background: #e94560;\n            outline: none;\n            border-radius: 15px;\n            height: 10px;\n        }\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 20px;\n            height: 20px;\n            background: #fff;\n            cursor: pointer;\n            border-radius: 50%;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Epic Shape Generator</h1>\n        <canvas id=\"canvas\" width=\"500\" height=\"300\"></canvas>\n        <div class=\"controls\">\n            <button id=\"changeShapeBtn\">Change Shape</button>\n            <button id=\"randomColorBtn\">Random Color</button>\n            <button id=\"animateBtn\">Animate</button>\n            <button id=\"toggleMultipleBtn\">Toggle Multiple</button>\n        </div>\n        <div class=\"color-controls\">\n            <input type=\"color\" id=\"colorPicker\" value=\"#e94560\">\n            <span id=\"colorDisplay\">#e94560</span>\n        </div>\n        <div class=\"slider-container\">\n            <div class=\"slider-label\">\n                <span>Size:</span>\n                <span id=\"sizeValue\">100</span>\n            </div>\n            <input type=\"range\" id=\"sizeSlider\" min=\"10\" max=\"200\" value=\"100\">\n        </div>\n        <div class=\"slider-container\">\n            <div class=\"slider-label\">\n                <span>Rotation:</span>\n                <span id=\"rotationValue\">0Â°</span>\n            </div>\n            <input type=\"range\" id=\"rotationSlider\" min=\"0\" max=\"360\" value=\"0\">\n        </div>\n    </div>\n\n    <script>\n        const canvas = document.getElementById('canvas');\n        const ctx = canvas.getContext('2d');\n        const changeShapeBtn = document.getElementById('changeShapeBtn');\n        const randomColorBtn = document.getElementById('randomColorBtn');\n        const colorPicker = document.getElementById('colorPicker');\n        const colorDisplay = document.getElementById('colorDisplay');\n        const animateBtn = document.getElementById('animateBtn');\n        const toggleMultipleBtn = document.getElementById('toggleMultipleBtn');\n        const sizeSlider = document.getElementById('sizeSlider');\n        const rotationSlider = document.getElementById('rotationSlider');\n        const sizeValue = document.getElementById('sizeValue');\n        const rotationValue = document.getElementById('rotationValue');\n\n        let currentShape = 'circle';\n        let currentColor = '#e94560';\n        let isMultiple = false;\n        let size = 100;\n        let rotation = 0;\n        let isAnimating = false;\n        let animationId;\n\n        const shapes = ['circle', 'square', 'triangle', 'star', 'heart'];\n\n        function drawShape(x, y, shape, color, size, rotation) {\n            ctx.save();\n            ctx.translate(x, y);\n            ctx.rotate(rotation * Math.PI / 180);\n            ctx.fillStyle = color;\n\n            switch(shape) {\n                case 'circle':\n                    ctx.beginPath();\n                    ctx.arc(0, 0, size / 2, 0, 2 * Math.PI);\n                    ctx.fill();\n                    break;\n                case 'square':\n                    ctx.fillRect(-size / 2, -size / 2, size, size);\n                    break;\n                case 'triangle':\n                    ctx.beginPath();\n                    ctx.moveTo(0, -size / 2);\n                    ctx.lineTo(-size / 2, size / 2);\n                    ctx.lineTo(size / 2, size / 2);\n                    ctx.closePath();\n                    ctx.fill();\n                    break;\n                case 'star':\n                    let spikes = 5;\n                    let outerRadius = size / 2;\n                    let innerRadius = size / 4;\n                    ctx.beginPath();\n                    for(let i = 0; i < spikes * 2; i++) {\n                        let radius = i % 2 === 0 ? outerRadius : innerRadius;\n                        let angle = i * Math.PI / spikes;\n                        ctx.lineTo(Math.cos(angle) * radius, Math.sin(angle) * radius);\n                    }\n                    ctx.closePath();\n                    ctx.fill();\n                    break;\n                case 'heart':\n                    ctx.beginPath();\n                    ctx.moveTo(0, size / 4);\n                    ctx.bezierCurveTo(size / 4, 0, size / 2, size / 4, 0, size / 2);\n                    ctx.bezierCurveTo(-size / 2, size / 4, -size / 4, 0, 0, size / 4);\n                    ctx.fill();\n                    break;\n            }\n            ctx.restore();\n        }\n\n        function draw() {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            if (isMultiple) {\n                for (let i = 0; i < 5; i++) {\n                    let x = Math.random() * canvas.width;\n                    let y = Math.random() * canvas.height;\n                    let shape = shapes[Math.floor(Math.random() * shapes.length)];\n                    let color = `hsl(${Math.random() * 360}, 100%, 50%)`;\n                    let size = Math.random() * 100 + 50;\n                    let rotation = Math.random() * 360;\n                    drawShape(x, y, shape, color, size, rotation);\n                }\n            } else {\n                drawShape(canvas.width / 2, canvas.height / 2, currentShape, currentColor, size, rotation);\n            }\n        }\n\n        function animate() {\n            if (!isAnimating) return;\n\n            rotation = (rotation + 2) % 360;\n            size = 100 + Math.sin(Date.now() / 500) * 50;\n\n            rotationSlider.value = rotation;\n            sizeSlider.value = size;\n            updateSliderValues();\n            draw();\n            animationId = requestAnimationFrame(animate);\n        }\n\n        function updateSliderValues() {\n            sizeValue.textContent = Math.round(size);\n            rotationValue.textContent = Math.round(rotation) + 'Â°';\n        }\n\n        changeShapeBtn.addEventListener('click', () => {\n            const currentIndex = shapes.indexOf(currentShape);\n            currentShape = shapes[(currentIndex + 1) % shapes.length];\n            draw();\n        });\n\n        randomColorBtn.addEventListener('click', () => {\n            currentColor = '#' + Math.floor(Math.random()*16777215).toString(16);\n            colorPicker.value = currentColor;\n            colorDisplay.textContent = currentColor;\n            draw();\n        });\n\n        colorPicker.addEventListener('input', (e) => {\n            currentColor = e.target.value;\n            colorDisplay.textContent = currentColor;\n            draw();\n        });\n\n        animateBtn.addEventListener('click', () => {\n            isAnimating = !isAnimating;\n            if (isAnimating) {\n                animate();\n                animateBtn.textContent = 'Stop';\n            } else {\n                cancelAnimationFrame(animationId);\n                animateBtn.textContent = 'Animate';\n            }\n        });\n\n        toggleMultipleBtn.addEventListener('click', () => {\n            isMultiple = !isMultiple;\n            draw();\n        });\n\n        sizeSlider.addEventListener('input', (e) => {\n            size = parseInt(e.target.value);\n            updateSliderValues();\n            draw();\n        });\n\n        rotationSlider.addEventListener('input', (e) => {\n            rotation = parseInt(e.target.value);\n            updateSliderValues();\n            draw();\n        });\n\n        draw();\n    </script>\n</body>\n</html>\n```\n\n![](https://miro.medium.com/1*RDrUgAWiwDE6DJ_T-kP3yQ.png)\n\n![](https://miro.medium.com/1*CiRJczR5KQ8xBMDOBTBK-g.png)\n\n![](https://miro.medium.com/1*BYxQ3yQEUZQ-TybqKJ7NIg.png)\n\nI had planned to write an article for Bitcoinnews tonight, but I found this diversion quite enjoyable. While this app might not win any awards, I believe there's immense value in building things purely for play and experimentation. Life is more fun that way.\n\nI'm currently [reading about Claude Shannon](https://amzn.to/3T9JJKp), who seemed to embody this philosophy. His playful approach to problem-solving helped transform the world from analog to digital - a shift I consider largely positive. It's inspiring to see how curiosity-driven tinkering can lead to groundbreaking innovations.\n\n![[https://x.com/ConorChepenik/status/1828984778164461891](https://x.com/ConorChepenik/status/1828984778164461891)](https://miro.medium.com/1*3JFTp1avA9xVN4G67QSujQ.png)\n\nBalancing the analog and digital worlds is a challenge many of us face. While there's undeniable charm and nostalgia in physical objects, the efficiency and innovation of digital technologies are reshaping our world in profound ways. Bitcoin exemplifies this shift, offering a digital solution to age-old monetary challenges. As we navigate this evolving landscape, it's crucial to appreciate the strengths of both realms. The key lies not in wholly abandoning one for the other, but in thoughtfully integrating digital advancements while preserving the meaningful aspects of our analog heritage. This balance allows us to harness the best of both worlds, creating a future that's both innovative and grounded in human experience.\n\n8/28/24\n\nConor Jay Chepenik",
  "wordCount": 1211,
  "readingTime": 5.40314465408805,
  "claps": 0,
  "voters": 0
}