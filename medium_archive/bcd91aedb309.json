{
  "id": "bcd91aedb309",
  "title": "Day 380",
  "createdAt": "2023-04-06 19:44:58",
  "tags": [
    "react",
    "coding"
  ],
  "url": "https://chepenikconor.medium.com/day-380-bcd91aedb309",
  "content": "# Day 380\n\nThis week in my coding bootcamp we have been getting comfortable using React. Thus, I will be writing an outline of the main concepts I've learned, taken notes on, and need to remember for my systems check tomorrow. Before doing so I'm really getting a kick out of using AI to generate dope React logos. You are welcome.\n\n![](https://miro.medium.com/0*0q4b6kUdkHGdRcXt)\n\nConcepts I need to know:\n\n1. JSX: A syntax extension for JavaScript, JSX allows you to write HTML-like code within your JavaScript code. It simplifies the process of rendering elements on the page.\n\n![](https://miro.medium.com/0*krA3C_zY_p7ZXoul.png)\n\n2. Props: Short for properties, props allow you to pass data from a parent component to a child component.\n\n3. Mapping over elements: The .map() function lets you iterate over an array and return a new array, creating a component for each element you iterate over.\n\n4. useState: A React Hook that allows you to manage state in functional components. It provides a getter and setter function for updating and referencing state values. Make sure to import useState in the top of your file like this.\n\n```javascript\nimport React, { useState } from 'react';\n```\n\n5. Defining methods to change state: Create functions within your component that can be called to modify the state using the setter function provided by useState.\n\n```javascript\nconst [*getter goes here*, *setter goes here*] = useState(null)\n```\n\n6. Closure functions: Functions that capture variables from their parent scope, enabling the use of those variables within the child function.\n\n7. React application flow: Understand when a page re-renders and how React components communicate with each other.\n\nTo build your application, follow this workflow:\n\n1. Examine the provided logic and data.\n\n2. Create the JSX structure for your app, focusing on appearance rather than functionality or state.\n\n3. Break down your JSX into smaller components.\n\n4. Use .map() to eliminate repetition in your components, especially when rendering lists.\n\n5. Implement state management using useState to create getter and setter functions.\n\n6. Pass the necessary methods to the appropriate child components.\n\n7. Ensure that your methods receive the correct arguments by utilizing closure functions.\n\n8. Continuously debug your code and refactor as needed.\n\nAs you work through this process, remember to stay patient and persistent. Many times a walk helped me reset and refresh. React, like any framework, may seem daunting at first, but with practice and determination, you'll soon become more comfortable and confident in your skills. Especially since we now have Youtube, AI, and a plethora of other resources on the web. Happy coding!\n\n4/6/23\n\nConor Jay Chepenik\n\nP.S I got to stop eating Wendys for lunch. I appreciate the never frozen beef but the rest of the food is seed oil dog crap.",
  "wordCount": 440,
  "readingTime": 2.0437106918238994,
  "claps": 0,
  "voters": 0
}