{
  "id": "94fe932e3b79",
  "title": "Day 506",
  "createdAt": "2023-08-10 20:09:02",
  "tags": [
    "different",
    "experts",
    "can",
    "teach",
    "each-other"
  ],
  "url": "https://chepenikconor.medium.com/day-506-94fe932e3b79",
  "content": "# Day 506\n\nWhen I was learning math during my adolescence, long division and multiplication seemed like pointless things to learn because a calculator could do the math for me so much faster. Why put in the effort to learn something that a machine could do 10 times quicker? At that time, I didn't even carry a smartphone with a calculator in my pocket 99% of the time. Looking back though, I'm glad I learned those foundational skills. While I haven't had to use long division much since then, having that baseline understanding has proven valuable. I'm often able to do rough mental multiplication, and grasping those basic building blocks early on has helped with that.\n\nChatGPT, Claude, Bard and other incredible large language models are fantastic tools, especially for coding. However, I do wonder what this means for people just starting to learn to code today. It would be extremely difficult for me to pick up new languages and frameworks as quickly as I have without these AI assistants readily available. The problem is they can serve as shortcuts that circumvent deep learning. In my coding journey, my writing, and other pursuits, these tools have helped me progress more rapidly. But like with most things in life, striking the right balance is key. Yes, it's amazing to have these tools, but without building a baseline of understanding, we can't even discern when they make mistakes.\n\nOften times I don't want to struggle with a coding problem. If I'm stuck for more than 2 minutes I'll just ask for help. Which is nice because I can see my errors super quick. The challenge is am I really understanding something if I'm just checking the answer without wrestling with it.\n\nI hold a suspicion that in the forthcoming years, the progression of coding tools will be so rapid that the majority of aspiring programmers may forgo the extensive study of programming languages. Instead, they might invest their time in mastering pseudo code. Proficiency in pseudo code, coupled with a sound familiarity with an Integrated Development Environment (IDE), could empower individuals to never have to write actual code. Just pseudo code up your app and effortlessly summon a specialized Language Model, like ChatGPT, to generate any required code.\n\nPicture this scenario: your organization mandates the conversion of code from Python to Java, or vice versa. In such instances, a simple request to ChatGPT could seamlessly accomplish the task. The era of adapting to new programming languages might yield to the era of adeptly maneuvering pseudo code and leveraging advanced AI systems for precise code generation.\n\nWho knows how things will shake out but it is fun to speculate. Regardless of what happens I think having an understanding of computers will prove valuable in the future.\n\nOne last thing I'd like to touch on before I wrap up today's writing is the value in having experts in two separate fields come together to innovate. I've been thinking a lot about the conclusion of Nick Szabo's Smart Contract article.\n\n> Digital cash is here today, and many more smart contract mechanisms are being designed. So far the design criteria important for automating contract execution have come from disparate fields like economics and cryptography, with little cross-communication: little awareness of the technology on the one hand, and little awareness of its best business uses other. The idea of smart contracts is to recognize that these efforts are striving after common objectives, which converge on the concept of smart contracts.\n\nSzabo makes an excellent point about the need for greater cross-communication between experts in different fields. I don't care if your field is economics, cryptography, technology, business, or something else. When innovators from diverse backgrounds come together to create solutions, they are able to draw from a broader range of perspectives, skills, and knowledge. This interdisciplinary collaboration often leads to creative new applications that transcend individual disciplines. As Szabo notes, the concept of smart contracts has emerged from the synthesis of ideas across multiple fields. Though pioneers in each area were initially working in isolation, their work converged on the shared goal of automating contract execution. This demonstrates the immense value of facilitating dialogue between experts in order to spark innovation.\n\nLooking ahead, developing frameworks and incentives for multidisciplinary collaboration will be key to realizing further technological breakthroughs. The potential of fields like cryptography, economics, and computer science to transform finance and business is far from exhausted. But fully unlocking that potential hinges on specialists from different domains continuing to learn from each other and build upon each other's discoveries.\n\n![generated on nightcafe.studio](https://miro.medium.com/0*TXroi28PV0_3y7vT)\n\n8/10/23\n\nConor Jay Chepenik",
  "wordCount": 768,
  "readingTime": 3.09811320754717,
  "claps": 3,
  "voters": 1
}