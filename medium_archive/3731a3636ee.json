{
  "id": "3731a3636ee",
  "title": "Day 372",
  "createdAt": "2023-03-29 13:34:19",
  "tags": [
    "models",
    "views",
    "controllers"
  ],
  "url": "https://chepenikconor.medium.com/day-372-3731a3636ee",
  "content": "# Day 372\n\nThis week in my coding class we are going to have a systems check on how to leverage M.V.C. This is the Model-View-Controller method which is a pattern in software design commonly used to implement user interfaces, data, and controlling logic. It emphasizes a separation between the software's business logic and display. So what better way to prepare than by explaining how some of this stuff works. Routers are the _Controllers_ in MVC, and determine how our applications respond to requests. Typically in the src file of our code we will have another file titled routes which contain our code to route a user around the web application we are creating. In the example my class gave for a messages app we would have a rootRouter.js file inside of the routes folder which would contain some code like this. (We are using the express framework to spin up servers to test that our code is working)\n\n```javascript\nimport express from \"express\"\nimport messagesRouter from \"./messageRouter.js\"\n\nconst rootRouter = new express.Router()\n\nrootRouter.use(\"/messages\", messagesRouter)\n\nexport default rootRouter\n```\n\nWe would also have another file in the routes folder called messageRouter.js that would look like this.\n\n```javascript\n// src/routes/messagesRouter.js\n\nimport express from \"express\"\n\nconst messagesRouter = new express.Router()\n\nconst messages = `I am number one </br>\nhighway to the DANGER ZONE </br>\nthe answer is 42 </br>\nI LOVE CATS SO MUCH </br>\nyou miss every shot you dont take :) </br>\n(ノ^_^)ノ┻━┻ ┬─┬ ノ( ^_^ノ) </br>\nHello World </br>\no.o </br>\nBlub blub blub blub I'm a fish </br>\nThe above statement is false </br>\nThe statement below is true </br>\nCan I insert a <a href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\">link</a>? </br>\nThanks, that link was really helpful!`\n\nmessagesRouter.get('/', (req, res) => {\n    res.contentType(\"text.html\").send(messages)\n})\n\nexport default messagesRouter\n```\n\nmy app.js file which is located in the src folder of my code contains this.\n\n```javascript\nimport rootRouter from \"./routes/rootRouter.js\"\nimport express from \"express\"\nimport logger from \"morgan\"\nimport bodyParser from \"body-parser\"\nimport path from 'path'\nimport { fileURLToPath } from 'url'\n\nconst __filename = fileURLToPath(import.meta.url)\nconst __dirname = path.dirname(__filename)\n\nconst app = express()\n\napp.use(logger(\"dev\"))\napp.use(bodyParser.urlencoded({ extended: false }))\napp.use(express.static(path.join(__dirname, '../public')))\n\napp.use(rootRouter)\napp.listen(3000, \"0.0.0.0\", () => {\n  console.log(\"Server is listening...\")\n})\n\nexport default app\n```\n\nSo when I run yarn dev to spin up a server and go to localhost:3000/messages in my browser I see this.\n\n> I am number one\nhighway to the DANGER ZONE\nthe answer is 42\nI LOVE CATS SO MUCH\nyou miss every shot you dont take :)\n(ノ^_^)ノ┻━┻ ┬─┬ ノ( ^_^ノ)\nHello World\no.o\nBlub blub blub blub I'm a fish\nThe above statement is false\nThe statement below is true\nCan I insert a [link](https://www.youtube.com/watch?v=dQw4w9WgXcQ)?\nThanks, that link was really helpful!\n\nHope that helps you figure out a bit of how the MVC model works. Definitely takes some getting use to but when an app becomes incredibly complex I'm sure being able to break the code down like this will be super beneficial so you can both test things and see when things are going wrong without breaking every other part of your app.\n\n3/29/23\n\nConor Jay Chepenik",
  "wordCount": 516,
  "readingTime": 1.9471698113207547,
  "claps": 0,
  "voters": 0
}