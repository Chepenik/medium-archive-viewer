{
  "id": "5c44e2cc9548",
  "title": "Day 366",
  "createdAt": "2023-03-24 02:34:43",
  "tags": [
    "coding",
    "mass-state-house"
  ],
  "url": "https://chepenikconor.medium.com/day-366-5c44e2cc9548",
  "content": "# Day 366\n\nWell I figured since I'm going to be spending so much time coding I can knock out two goals with one by making this a coding blog. Thus, I'll be writing about learning to code until I've chopped sufficient wood and carried sufficient water that coding is second nature. Brace yourselves peeps: codingChep is here. First lesson: inheritance!\n\n```javascript\n//Rectangle class for clarity\nclass Rectangle {\n  constructor(length, width) {\n    this.length = length\n    this.width = width\n  }\n\n  area() {\n    return this.length * this.width\n  }\n\n  perimeter() {\n    return this.length * 2 + this.width * 2\n  }\n}\n\nexport default Rectangle\n\n\n//Instead of writing out all this\n\nimport Rectangle from './Rectangle.js' \nclass Square extends Rectangle { \nconstructor(sideLength) { \nsuper() \nthis.width = sideLength \nthis.length = sideLength \n } \n\n} \n\nexport default Square\n\n//We could use to do inheritance this\n\nimport Rectangle from './Rectangle.js'\n\nclass Square extends Rectangle {\n  constructor(sideLength) {\n    super(sideLength, sideLength)\n  }\n}\n\nexport default Square\n```\n\nThis way, when we call the super, we're passing the length and width arguments required by the `Rectangle` constructor. Since the `Rectangle` constructor uses these values to assign the `width` and `height` properties, we don't have to do any additional work. It is important to be careful with Inheritance. Most developers will encourage you to use inheritance sparingly. It can be overly used, and it's often tempting for beginners to implement it where it's not necessarily warranted or needed.\n\nInheritance is an important concept in object-oriented programming where a new class is created by inheriting properties and methods from an existing class. While inheritance can be useful for reducing code duplication and increasing code reuse, it can also lead to several problems if not used carefully. One of the main issues is tight coupling, where changes to the parent class can have unintended consequences on the child class. This can lead to a domino effect, where many parts of the codebase need to be updated. Additionally, inheritance can also make it difficult to maintain code and understand the relationships between classes.\n\nBecause of these potential problems, most developers recommend using inheritance sparingly. Instead, it is better to use composition or interface implementation to achieve code reuse. Composition involves creating a new class that contains instances of other classes, while interface implementation defines a set of methods that must be implemented by a class. Both of these methods allow for code reuse without the tight coupling that can occur with inheritance. By being careful with inheritance and using other methods of achieving code reuse, developers can create more maintainable and flexible codebases.\n\nOn another note I went to a Mass Adoption Bitcoin meetup tonight and it was an absolute pleasure getting to chat with other Bitcoiners. So much signal. One thing I've been thinking about is reforming the system vs burning it all down. Hopefully Bitcoin can allow for the former, but who knows. Humans are messy. It will be interesting to see how it all plays out. Anyways, I'm exhausted. Long day and I need to get some sleep for my first systems check tomorrow so I will end this by noting I need to check out Zion and also spend more time leveraging Nostr. I got zapped 46 sats already for this post.\n\n[https://iris.to/note1mya9qxdl8t8trvjlh2ua9c86yyaqc4zueekpzqtjhfplf0q3aersdz6e7f](https://iris.to/note1mya9qxdl8t8trvjlh2ua9c86yyaqc4zueekpzqtjhfplf0q3aersdz6e7f)\n\n![](https://miro.medium.com/0*kw005I9jZ4NzGx85.jpeg)\n\nA photo I took the other day.\n\n3/23/23\n\nConor Jay Chepenik",
  "wordCount": 550,
  "readingTime": 2.2754716981132077,
  "claps": 0,
  "voters": 0
}