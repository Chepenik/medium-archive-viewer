{
  "id": "ea25edb81338",
  "title": "Day 522",
  "createdAt": "2023-08-27 02:27:27",
  "tags": [
    "java",
    "coding",
    "memes",
    "api",
    "mvc"
  ],
  "url": "https://chepenikconor.medium.com/day-522-ea25edb81338",
  "content": "# Day 522\n\n![Generated with firefly](https://miro.medium.com/1*1rlRBqtSuyvaOU5uCydM5w.png)\n\nI need to build a Java API for a mock social media app and it's challenging me. So today I'll be using my Medium to walk through some concepts I need to better understand how to build this API.\n\nI will start by breaking down the components of a Java application using the Model-View-Controller (MVC) pattern, along with the necessary concepts like Services, DAOs (Data Access Objects), and databases. In my case, I'm using Javalin, which is a lightweight web framework for Java.\n\n1. Model: The Model represents the data and business logic of an application. It encapsulates the data structures and methods that interact with that data. I'm dealing with a social media app so the models I'm building would likely include classes like `Account` and `Message`, which mirror the structure of the JSON objects the app is going to be dealing with. These classes would have fields for attributes like `account_id`, `username`, `password`, `message_id`, `message_text`, etc.\n\n2. Controller: The Controller handles the logic of your application. It receives input from the user, processes it, interacts with the Model to retrieve or modify data, and then sends the appropriate output to the user. Each user story you've described maps to a controller action. For example, you'd have controller methods for actions like user registration, login, creating messages, getting messages, updating messages, and so on.\n\n3. Service: Services are often used to encapsulate complex business logic that doesn't directly belong in the Controller. They abstract away the implementation details from the Controller and act as an intermediary between the Controller and the Model. For instance, in my application, I might have a `UserService` and a `MessageService`. The `UserService` could handle tasks related to user registration and login, while the `MessageService` could manage tasks related to creating, retrieving, updating, and deleting messages.\n\n4. DAO (Data Access Object): The DAO is responsible for interacting with the database. It provides an abstraction layer that shields the rest of the application from the underlying database implementation. DAOs contain methods to perform CRUD (Create, Read, Update, Delete) operations on application data. In my case, I might have a `MessageDAO` to handle database operations related to messages, and an `AccountDAO` for account-related operations. DAOs typically use SQL queries (or other data access methods) to communicate with the database.\n\n5. SQL Database: The database is where an application's data is stored. In my case, I will need to have tables for `Accounts` and `Messages`. Each table would have columns corresponding to the attributes of the objects I'm dealing with (e.g., `account_id`, `username`, `password` in the `Accounts` table, and `message_id`, `message_text`, etc. in the `Messages` table). My DAOs would execute SQL queries to interact with the database, such as selecting, inserting, updating, and deleting data.\n\n6. Javalin: Javalin is a web framework that helps me handle HTTP requests and responses. It sits between the client and my application's logic. Javalin allows me to define routes that map to specific controller methods. These routes specify the endpoints (URLs) that clients can use to interact with your application. For example, I can define routes for `/register`, `/login`, `/messages`, and so on, each corresponding to the actions I've described.\n\nIn summary, my Javalin application will receive HTTP requests through defined routes, the Controller will determine which Service and DAO methods to call based on the request, the Service will handle the business logic (which might include data validation, manipulation, etc.), and the DAOs will interact with the database to persist and retrieve data. The Model holds the data structures and entities an application uses. This division of responsibilities helps keep my code organized, maintainable, and testable.\n\nWhen I'm done building this mock social media app for practice I plan to build my own personal API for memes. At first it will just be general memes but over time I'd like to let devs request certain types of memes! Would be a lit API.\n\n8/26/23\n\nConor Jay Chepenik",
  "wordCount": 655,
  "readingTime": 2.6716981132075475,
  "claps": 0,
  "voters": 0
}